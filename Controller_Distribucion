package pe.edu.upc.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sun.el.parser.ParseException;


import pe.edu.upc.entity.Distribucion;
import pe.edu.upc.serviceinterface.IDistribucionService;

@Controller
@RequestMapping("/distribuciones")
public class DistribucionController {
	@Autowired
	private IDistribucionService dS;

	@GetMapping("/new")
	public String newDistribucion(Model model) {
		
		model.addAttribute("distribucion", new Distribucion());
		return "distribucion/distribucion";
	}

	@PostMapping("/save")
	public String saveDistribucion(@Valid Distribucion distribucion, BindingResult result, Model model, SessionStatus status)
			throws Exception {
		if (result.hasErrors()) {
			return "distribucion/distribucion";
		} else {
			dS.insert(distribucion);
		}
		
		model.addAttribute("listaDistribuciones", dS.list());
		
		return "/distribucion/listDistribucion"; 
	}
	
	@GetMapping("/list")
	public String listDistribuciones(Model model) {
		try {
			model.addAttribute("distribucion", new Distribucion());
			model.addAttribute("listaDistribuciones", dS.list());
						
		} catch (Exception e) {
			System.out.println("Error al listar distribuidores en el controller");
		}
		return "distribucion/listDistribucion";
		
	}
	@RequestMapping("/find")
	public String find(Model model, @Validated Distribucion dis) throws ParseException{
		
		List<Distribucion> listaDis;
		listaDis = dS.findBytipo(dis.getTipoDistribucion());
		
		if (listaDis.isEmpty()) {
			
			model.addAttribute("mensaje", "No se encontró");
			
		} 
		model.addAttribute("listaDistribuciones", listaDis);		
		return "distribucion/listDistribucion";
		
	}
	@RequestMapping("/delete/{id}")
	public String delete(Model model, @PathVariable(value = "id") int id) {
		try {
			if (id > 0) {
				dS.delete(id);
			}
			model.addAttribute("distribucion", new Distribucion());
			model.addAttribute("mensaje", "Se eliminó correctamente!");
			model.addAttribute("listaDistribuciones", dS.list());
		} catch (Exception e) {
			model.addAttribute("distribucion", new Distribucion());
			model.addAttribute("mensaje", "No se puede eliminar!!");
			model.addAttribute("listaDistribuciones", dS.list());

		}

		return "distribucion/listDistribucion";

	}
	@RequestMapping("/irupdate/{id}")
	public String irUpdate(@PathVariable int id, Model model, RedirectAttributes objRedir) {
		Optional<Distribucion> objDis = dS.searchId(id);
		if (objDis == null) {
			model.addAttribute("distribucion", new Distribucion());
			objRedir.addFlashAttribute("mensaje", "Ocurrió un error");
			return "redirect:/distribuciones/list";
		} else {
			model.addAttribute("distribucion", new Distribucion());
			model.addAttribute("listaDistribuciones", dS.list());
			model.addAttribute("distribucion", objDis.get());
			return "distribucion/udistribucion";

		}
		

	}
	@PostMapping("/update")
	public String update(@Valid Distribucion dis, BindingResult result, Model model, SessionStatus status)
			throws Exception {
		if (result.hasErrors()) {
			return "distribucion/distribucion";
		} else {
			dS.insert(dis);
		}
		model.addAttribute("listaDistribuciones", dS.list());
		return "redirect:/distribuciones/list";

	}
}
