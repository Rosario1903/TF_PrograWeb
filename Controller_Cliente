package pe.edu.upc.controller;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sun.el.parser.ParseException;

import pe.edu.upc.entity.Cliente;

import pe.edu.upc.serviceinterface.IClienteService;
import pe.edu.upc.serviceinterface.IUploadFileService;
import pe.edu.upc.serviceinterface.IUsuarioService;

@Controller
@RequestMapping("/clientes")
public class ClienteController {

	@Autowired
	private IUsuarioService uS;
	
	@Autowired
	private IClienteService cS;
	
	@Autowired
	private IUploadFileService uploadFileService;
	
	@GetMapping("/new")
	public String newCliente(Model model) {
		
		model.addAttribute("listaUsuarios", uS.listUsuario());
		model.addAttribute("cliente", new Cliente());
		
		return "cliente/cliente";
		
	}
	
	@PostMapping("/save")
	public String saveCliente(@Valid Cliente cliente, BindingResult result, Model model,@RequestParam("file") MultipartFile foto,RedirectAttributes flash, SessionStatus status) throws Exception {
		
		if (result.hasErrors()) {
			model.addAttribute("listaUsuarios", uS.listUsuario());
			return "cliente/cliente";
			
		} else {
			if (cliente.getIdCliente() > 0 && cliente.getFoto() != null && cliente.getFoto().length() > 0) {

				uploadFileService.delete(cliente.getFoto());
			}

			String uniqueFilename = null;
			try {
				uniqueFilename = uploadFileService.copy(foto);
			} catch (IOException e) {
				e.printStackTrace();
			}

			flash.addFlashAttribute("info", "Has subido correctamente '" + uniqueFilename + "'");
			cliente.setFoto(uniqueFilename);
		}
		
		int rpta = cS.insert(cliente);
		if (rpta > 0) {
			model.addAttribute("listaUsuarios", uS.listUsuario());
			model.addAttribute("mensaje", "Ya existe dni de cliente");
			return "/cliente/cliente";
		} else {
			model.addAttribute("mensaje", "Se guard贸 correctamente");
			status.setComplete();
		}
		model.addAttribute("listaClientes", cS.listCliente());
		
		return "redirect:/clientes/list";
		
	}
	
	@GetMapping("/list")
	public String listClientes(Model model) {
		
		try {
			model.addAttribute("cliente", new Cliente());
			model.addAttribute("listaClientes", cS.listCliente());
			
		} catch (Exception e) {
			System.out.println("Error al listar clientes en el controlador");
		}
		
		return "cliente/listCliente";
		
	}
	@RequestMapping("/find")
	public String findCliente(Model model, @Validated Cliente cliente) throws ParseException{
		
		List<Cliente> listaCliente;
		listaCliente = cS.findBydni(cliente.getDni());
		
		if (listaCliente.isEmpty()) {
			
			model.addAttribute("mensaje", "No se encontr贸");
			
		} 
		model.addAttribute("cliente", new Cliente());
		model.addAttribute("listaClientes", listaCliente);		
		return "cliente/listCliente";
		
	}
	@RequestMapping("/delete/{id}")
	public String deleteCliente(Model model, @PathVariable(value = "id") int id) {
		try {
			if (id > 0) {
				cS.delete(id);
			}
			model.addAttribute("cliente", new Cliente());
			model.addAttribute("mensaje", "Se elimin贸 correctamente!");
			model.addAttribute("listaClientes", cS.listCliente());
		} catch (Exception e) {
			model.addAttribute("cliente", new Cliente());
			model.addAttribute("mensaje", "No se puede eliminar!!");
			model.addAttribute("listaClientes", cS.listCliente());

		}

		return "cliente/listCliente";

	}
	@RequestMapping("/irupdate/{id}")
	public String irUpdate(@PathVariable int id, Model model, RedirectAttributes objRedir) {
		Optional<Cliente> objCli = cS.searchId(id);
		if (objCli == null) {
			model.addAttribute("listaUsuarios", uS.listUsuario());
			objRedir.addFlashAttribute("mensaje", "Ocurri贸 un error");
			return "redirect:/clientes/list";
		} else {
			model.addAttribute("listaUsuarios", uS.listUsuario());
			model.addAttribute("cliente", objCli.get());
			return "cliente/ucliente";

		}
		

	}
	@PostMapping("/update")
	public String updateCliente(@Valid Cliente cliente, BindingResult result, Model model, SessionStatus status)
			throws Exception {
		if (result.hasErrors()) {
			return "cliente/cliente";
		} else {
			cS.insert(cliente);
		}
		model.addAttribute("listaClientes", cS.listCliente());
		return "redirect:/clientes/list";

	}
	@GetMapping(value = "/uploads/{filename:.+}")
	public ResponseEntity<Resource> verFoto(@PathVariable String filename) {

		Resource recurso = null;

		try {
			recurso = uploadFileService.load(filename);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + recurso.getFilename() + "\"")
				.body(recurso);
	}
	@GetMapping(value = "/view/{id}")
	public String ver(@PathVariable(value = "id") Integer id, Model model, RedirectAttributes flash) {

		Optional<Cliente> cliente = cS.searchId(id);
		if (cliente == null) {
			flash.addFlashAttribute("error", "El cliente no existe en la base de datos");
			return "redirect:/clientes/list";
		}

		model.addAttribute("cliente", cliente.get());

		return "cliente/view";
	}

}
