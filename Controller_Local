package pe.edu.upc.controller;

import java.io.IOException;
import java.net.MalformedURLException;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import pe.edu.upc.entity.Local;

import pe.edu.upc.serviceinterface.ILocalService;
import pe.edu.upc.serviceinterface.IProveedorService;
import pe.edu.upc.serviceinterface.IUploadFileService;

@Controller
@RequestMapping("/locals")
public class LocalController {

	@Autowired
	private ILocalService lS;

	@Autowired
	private IProveedorService pS;

	@Autowired
	private IUploadFileService uploadFileService;

	@GetMapping("/new")
	public String newLocal(Model model) {
		model.addAttribute("listaProveedores", pS.listProveedor());
		model.addAttribute("local", new Local());
		return "local/local";
	}

	@GetMapping(value = "/uploads/{filename:.+}")
	public ResponseEntity<Resource> verFoto(@PathVariable String filename) {

		Resource recurso = null;

		try {
			recurso = uploadFileService.load(filename);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ResponseEntity.ok()
				.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + recurso.getFilename() + "\"")
				.body(recurso);
	}
	
	@PostMapping("/save")
	public String saveLocal(@Valid Local local, BindingResult result, Model model,
			@RequestParam("file") MultipartFile foto, RedirectAttributes flash, SessionStatus status) throws Exception {
		if (result.hasErrors()) {model.addAttribute("listaProveedores", pS.listProveedor());
			return "local/local";

		} else {
			if (local.getIdLocal() > 0 && local.getFoto() != null && local.getFoto().length() > 0) {
				uploadFileService.delete(local.getFoto());
			}
			String uniqueFilename = null;
			try {
				uniqueFilename = uploadFileService.copy(foto);

			} catch (IOException e) {
				e.printStackTrace();
			}

			flash.addFlashAttribute("info", "Has subido correctamente '" + uniqueFilename + "'");
			local.setFoto(uniqueFilename);

		int rpta = lS.insert(local);
			if (rpta > 0) {
				model.addAttribute("listaProveedores", pS.listProveedor());
				model.addAttribute("mensaje", "Ya existe id de Local");
				return "/local/local";
			} else {
				model.addAttribute("mensaje", "Se guard贸 correctamente");
				status.setComplete();
			}
			model.addAttribute("listaLocales", lS.list());
			
			return "redirect:/locals/list";
		}
	}

	

	@GetMapping("/list")
	public String listLocals(Model model) {
		try {
			model.addAttribute("local", new Local());

			model.addAttribute("listaLocales", lS.list());
		} catch (Exception e) {
			System.out.println("Error al listar locales en el controller");
		}
		return "local/listLocal";

	}
	@RequestMapping("/find")
	public String findLocal(Model model, @Validated Local local) throws ParseException{
		
		List<Local> listaLocal;
		listaLocal = lS.findByLocal(local.getNameLocal());
		
		if (listaLocal.isEmpty()) {
			
			model.addAttribute("mensaje", "No se encontr贸");
			
		} 
		model.addAttribute("proveedor", new Proveedor());
		model.addAttribute("listaLocales", listaLocal);		
		return "local/listLocal";
		
	}
	@RequestMapping("/delete/{id}")
	public String deleteLocal(Model model, @PathVariable(value = "id") int id) {
		try {
			if (id > 0) {
				lS.delete(id);
			}
			model.addAttribute("local", new Local());
			model.addAttribute("mensaje", "Se elimin贸 correctamente!");
			model.addAttribute("listaLocales", lS.list());
		} catch (Exception e) {
			model.addAttribute("local", new Local());
			model.addAttribute("mensaje", "No se puede eliminar!!");
			model.addAttribute("listaLocales", lS.list());

		}

		return "local/listLocal";

	}
	@RequestMapping("/irupdate/{id}")
	public String irUpdate(@PathVariable int id, Model model, RedirectAttributes objRedir) {
		Optional<Local> objLoc = lS.searchId(id);
		if (objLoc == null) {
			model.addAttribute("listaProveedores", pS.listProveedor());
			objRedir.addFlashAttribute("mensaje", "Ocurri贸 un error");
			return "redirect:/proveedores/list";
		} else {
			model.addAttribute("listaProveedores", pS.listProveedor());
			model.addAttribute("local", objLoc.get());
			return "local/ulocal";

		}
		

	}
	@PostMapping("/update")
	public String updateLocal(@Valid Local local, BindingResult result, Model model, SessionStatus status)
			throws Exception {
		  if (result.hasErrors()) {
	            return "local/local";
	        } else {

	            lS.insert(local);
	            model.addAttribute("mensaje","Registro Actualizado");
	            model.addAttribute("listaProveedores", lS.list());
	        }
	        model.addAttribute("listaLocales", lS.list());
	        return "redirect:/locals/list";

	}
	

}


