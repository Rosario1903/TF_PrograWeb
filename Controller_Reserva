package pe.edu.upc.controller;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.sun.el.parser.ParseException;


import pe.edu.upc.entity.Reserva;
import pe.edu.upc.entity.Usuario;
import pe.edu.upc.serviceinterface.IClienteService;
import pe.edu.upc.serviceinterface.IProductService;
import pe.edu.upc.serviceinterface.IReservaService;
@Controller
@RequestMapping("/reservations")
public class ReservaController {
	@Autowired
	private IReservaService rS;

	@Autowired
	private IProductService pS;

	@Autowired
	private IClienteService cS;
	
	@GetMapping("/new")
	public String newReserva(Model model) {

		model.addAttribute("listaClientes", cS.listCliente());
		model.addAttribute("listaProductos", pS.list());
		model.addAttribute("reserva", new Reserva());
		return "reserva/reserva";
	}

	@PostMapping("/save")
	public String saveReserva(@Valid Reserva reserva, BindingResult result, Model model, SessionStatus status)
			throws Exception {

		if (result.hasErrors()) {
			model.addAttribute("listaProductos", pS.list());
			return "reserva/reserva";
		} else {
			rS.insert(reserva);
		}
		model.addAttribute("listaReserva", rS.list());
		return "redirect:/reservations/list";
	}

	@GetMapping("/list")
	public String listVaccines(Model model) {
		try {
			model.addAttribute("listaReserva", rS.list());
		} catch (Exception e) {
			System.out.println("Error al listar reserva en el controller");
		}
		return "reserva/listReserva";
	}
	
	@RequestMapping("/delete/{id}")
	public String deleteReserva(Model model, @PathVariable(value = "id") int id) {
		try {
			if (id > 0) {
				rS.delete(id);
			}
			model.addAttribute("reserva", new Reserva());

			model.addAttribute("mensaje", "Se eliminó correctamente!");
			model.addAttribute("listaReserva", rS.list());
		} catch (Exception e) {
			model.addAttribute("mensaje", "No se puede eliminar!!");
			model.addAttribute("listaReserva", rS.list());

		}

		return "reserva/listReserva";

	}
	
	@RequestMapping("/find")
	public String findReserva(Map<String, Object> model, @ModelAttribute Usuario usuario) throws ParseException {
		List<Reserva> listaReserva;
		usuario.setNombreUsuario(usuario.getNombreUsuario());
		listaReserva = rS.findByClienteUsuarioNombreUsuario(usuario.getNombreUsuario());

		if (listaReserva.isEmpty()) {
			model.put("mensaje", "No se encontró");
		}
		model.put("listaReserva", listaReserva );
		return "reserva/listReserva";

	}
	
	@ModelAttribute("usuario")
	public Usuario createModel() {
	    return new Usuario();
	}
	
	@RequestMapping("/irupdate/{id}")
	public String irUpdate(@PathVariable int id, Model model, RedirectAttributes objRedir) {
		Optional<Reserva> objRes = rS.searchId(id);
		if (objRes == null) {
			objRedir.addFlashAttribute("mensaje", "Ocurrió un error");
			return "redirect:/reservations/list";
		} else {
			model.addAttribute("listaClientes", cS.list());
			model.addAttribute("reserva", objRes.get());
			return "reserva/ureserva";

		}
	}
	
	@PostMapping("/update")
	public String updateReserva(@Valid Reserva reserva, BindingResult result, Model model, SessionStatus status)
			throws Exception {
		if (result.hasErrors()) {
			return "reserva/reserva";
		} else {
			rS.insert(reserva);
		}
		model.addAttribute("listaVacunas", rS.list());
		return "redirect:/reservations/list";

	}

}
